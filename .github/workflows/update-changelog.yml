name: Update Arcane Changelog

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Ensure content directory
        run: mkdir -p content

      - name: Backup existing changelog
        run: |
          if [[ -f content/changelog.md ]]; then
            cp content/changelog.md content/changelog.current.md
          fi

      - name: Generate changelog (git-cliff)
        id: cliff
        uses: orhun/git-cliff-action@v4
        with:
          config: .github/cliff.toml
          args: --verbose
        env:
          OUTPUT: /tmp/FULL_CHANGELOG.md

      - name: Extract latest release section
        id: extract
        shell: bash
        run: |
          set -euo pipefail
          FULL_FILE="/tmp/FULL_CHANGELOG.md"
          [[ ! -s "$FULL_FILE" ]] && { echo "Full changelog empty"; exit 1; }

          # Find first release heading line: starts with "## "
            # (git-cliff default template headings look like: ## [1.2.3] - 2025-09-21)
          START_LINE=$(grep -nE '^##[[:space:]]+\[[0-9v]' "$FULL_FILE" | head -n1 | cut -d: -f1 || true)
          if [[ -z "${START_LINE:-}" ]]; then
            echo "No release headings found."
            echo "updated=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Capture tag name (strip brackets)
          HEADER_LINE=$(sed -n "${START_LINE}p" "$FULL_FILE")
          # Extract inside [] before first ]
          TAG=$(echo "$HEADER_LINE" | sed -E 's/^##[[:space:]]+\[([^]]+)\].*/\1/')
          echo "Detected latest tag: $TAG"

          # Determine end line (next heading or EOF)
          END_LINE=$(awk -v s="$START_LINE" 'NR>s && /^##[[:space:]]+\[/{print NR; exit}' "$FULL_FILE" || true)
          if [[ -n "${END_LINE:-}" ]]; then
            sed -n "${START_LINE},$((END_LINE-1))p" "$FULL_FILE" > /tmp/SECTION.md
          else
            sed -n "${START_LINE},\$p" "$FULL_FILE" > /tmp/SECTION.md
          fi

          echo "version=$TAG" >> "$GITHUB_OUTPUT"
          echo "branch=docs/changelog-$TAG" >> "$GITHUB_OUTPUT"

          # Skip if already present
          if [[ -f content/changelog.current.md ]] && grep -qE "^##[[:space:]]+\[$TAG\]" content/changelog.current.md; then
            echo "Latest tag already in changelog."
            echo "updated=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Frontmatter template
          FRONTMATTER="---"$'\n'"title: 'Changelog'"$'\n'"description: 'Release notes for Arcane'"$'\n'"---"

          if [[ -f content/changelog.current.md ]]; then
            if head -n1 content/changelog.current.md | grep -q '^---$'; then
              # Has frontmatter, replicate it
              FM_END=$(awk '/^---$/{c++} c==2{print NR; exit}' content/changelog.current.md || true)
              if [[ -n "${FM_END:-}" ]]; then
                head -n "$FM_END" content/changelog.current.md > content/changelog.md
                echo >> content/changelog.md
                cat /tmp/SECTION.md >> content/changelog.md
                echo >> content/changelog.md
                tail -n +"$((FM_END+1))" content/changelog.current.md >> content/changelog.md
              else
                printf "%s\n\n" "$FRONTMATTER" > content/changelog.md
                cat /tmp/SECTION.md >> content/changelog.md
                echo >> content/changelog.md
                cat content/changelog.current.md >> content/changelog.md
              fi
            else
              printf "%s\n\n" "$FRONTMATTER" > content/changelog.md
              cat /tmp/SECTION.md >> content/changelog.md
              echo >> content/changelog.md
              cat content/changelog.current.md >> content/changelog.md
            fi
          else
            printf "%s\n\n" "$FRONTMATTER" > content/changelog.md
            cat /tmp/SECTION.md >> content/changelog.md
            echo >> content/changelog.md
          fi

          echo "updated=true" >> "$GITHUB_OUTPUT"

      - name: Create pull request
        if: steps.extract.outputs.updated == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.ACTIONS_PAT }}
          commit-message: 'docs(changelog): add ${{ steps.extract.outputs.version }} release notes'
          title: 'docs(changelog): add ${{ steps.extract.outputs.version }} release notes'
          body: 'Automated changelog update for ${{ steps.extract.outputs.version }} using git-cliff.'
          branch: '${{ steps.extract.outputs.branch }}'
          base: main
          add-paths: |
            content/changelog.md
          delete-branch: true
